{"version":3,"sources":["../src/scalejs.base.type.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAiBI,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,QAAI,QAAQ,SAAZ,EAAuB;AACnB,eAAO,WAAP;AACH;;AAED,QAAI,QAAQ,IAAZ,EAAkB;AACd,eAAO,MAAP;AACH;;AAED,QAAI,IAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,EAAoC,KAApC,CAA0C,gBAA1C,EAA4D,CAA5D,EAA+D,WAA/D,EAAR;AAAA,QACI,CADJ;;AAGA,QAAI,MAAM,QAAV,EAAoB;AAChB,eAAO,CAAP;AACH;;AAED,QAAI,IAAI,WAAJ,CAAgB,QAAhB,GAA2B,KAA3B,CAAiC,mCAAjC,CAAJ;AACA,QAAI,MAAM,IAAV,EAAgB;AACZ,eAAO,QAAP;AACH;;AAED,WAAO,EAAE,CAAF,CAAP;AACH;;;;;;;;;;;;;AAcD,SAAS,EAAT,CAAY,KAAZ,EAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDf,QAAI,QAAc,KAAK,CAAvB;AAAA,QACI,CADJ;AAAA,Q;AAEI,aAAc,UAAU,MAF5B;AAAA,QAGI,OAAc,SAAS,CAH3B;AAAA,QAII,IAJJ;AAAA,QAKI,UALJ;AAAA,QAMI,aANJ;AAAA,QAOI,IAAc,KAPlB;;AASA,QAAI,WAAW,CAAf,EAAkB;AACd,eAAO,KAAP,C;AACH;;AAED,QAAI,WAAW,CAAf,EAAkB;AACd,eAAQ,UAAU,IAAV,IAAkB,UAAU,KAApC;AACH;;AAED,QAAI,SAAS,CAAb,EAAgB;AACZ,aAAK,IAAI,CAAT,EAAY,IAAI,OAAO,CAAvB,EAA0B,KAAK,CAA/B,EAAkC;AAC9B,gBAAI,CAAC,GAAG,CAAH,CAAL,EAAY;AACR,uBAAO,KAAP;AACH;AACD,gBAAI,EAAE,UAAU,IAAI,CAAd,CAAF,CAAJ;AACH;AACJ;;AAED,WAAO,UAAU,IAAV,CAAP;AACA,QAAI,MAAM,IAAV,EAAgB;AACZ,eAAQ,SAAS,IAAT,IAAiB,SAAS,MAAlC;AACH;AACD,QAAI,MAAM,KAAV,EAAiB;AACb,eAAQ,SAAS,KAAT,IAAkB,SAAS,WAAnC;AACH;AACD,QAAI,SAAS,EAAb,EAAiB;AACb,eAAO,MAAM,IAAb;AACH;;AAED,wBAAoB,IAApB,yCAAoB,IAApB;AACA,QAAI,eAAe,QAAnB,EAA6B;AACzB,wBACI,OAAO,SAAP,CACK,QADL,CAEK,IAFL,CAEU,CAFV,EAGK,KAHL,CAGW,CAHX,EAGc,CAAC,CAHf,EAIK,WAJL,EADJ;AAMA,eAAO,kBAAkB,IAAzB;AACH;;AAED,QAAI,eAAe,UAAnB,EAA+B;AAC3B,eAAO,aAAa,IAApB;AACH;;AAED,WAAO,MAAM,IAAb;AACH;;kBAEc;AACX,QAAS,EADE;AAEX,YAAS;AAFE,C","file":"scalejs.base.type.js","sourcesContent":["/**\r\n * Provides type functionality to scalejs base\r\n * @namespace scalejs.base\r\n * @module type\r\n */\r\n\r\n/*global define*/\r\n\r\n    \r\n\r\n    /**\r\n     * Detects the type of the passed object\r\n     *\r\n     * @param {Any} obj object to find the type of\r\n     * @memberOf type\r\n     * @return {String} type of the passed object\r\n     */\r\n    function typeOf(obj) {\r\n        if (obj === undefined) {\r\n            return 'undefined';\r\n        }\r\n\r\n        if (obj === null) {\r\n            return 'null';\r\n        }\r\n\r\n        var t = Object.prototype.toString.call(obj).match(/\\s([a-z|A-Z]+)/)[1].toLowerCase(),\r\n            m;\r\n\r\n        if (t !== 'object') {\r\n            return t;\r\n        }\r\n\r\n        m = obj.constructor.toString().match(/^function\\s*([$A-Z_][0-9A-Z_$]*)/i);\r\n        if (m === null) {\r\n            return 'object';\r\n        }\r\n\r\n        return m[1];\r\n    }\r\n\r\n\r\n    /**\r\n     * Determines if an object (and possibly a chain of properties within\r\n     * that object actually are of the passed type\r\n     * (no type will be null/undefined)\r\n     *\r\n     * @param {Any}        value     object to test\r\n     * @param {String}     [prop...] property chain to test within value\r\n     * @param {Any|String} [type]    type of the object to test for\r\n     * @memberOf type\r\n     * @return {Boolean} if the object 'is' (see inline documentation)\r\n     */\r\n    function is(value) {\r\n        // If more than two arguments are provided, the value is considered to be\r\n        // nested within a chain of properties starting with the first argument:\r\n        // | is(object,'parent','child','leaf','boolean')\r\n        // will check whether the property object.parent.child.leaf exists and is\r\n        // a boolean.\r\n        //\r\n        // The intent of this method is to replace unsafe guard conditions that\r\n        // rely on type coercion:\r\n        // | if (object && object.parent && object.parent.child) {\r\n        // |   // Issue: all falsy values are treated like null and undefined:\r\n        // |   // '', 0, false...\r\n        // | }\r\n        // with a safer check in a single call:\r\n        // | if ( is(object,'parent','child','number') ) {\r\n        // |   // only null and undefined values are rejected\r\n        // |   // and the type expected (here 'number') is explicit\r\n        // | }\r\n        //\r\n        // Returns:\r\n        //   * false, if no argument is provided\r\n        //   * false, if a single argument is provided which is null or undefined\r\n        //   * true, if a single argument is provided, which is not null/undefined\r\n        //   * if the type argument is a non-empty string, it is compared with the\r\n        //     internal class of the value, put in lower case\r\n        //   * if the type argument is a function, the instanceof operator is used\r\n        //     to check if the value is considered an instance of the function\r\n        //   * otherwise, the value is compared with the provided type using the\r\n        //     strict equality operator ===\r\n        //\r\n        // Notes:\r\n        // This method retrieves the internal class of the provided value using\r\n        // | Object.prototype.toString.call(value).slice(8, -1)\r\n        // The class is then converted to lower case.\r\n        //\r\n        // See \"The Class of an Object\" section in the JavaScript Garden for\r\n        // more details on the internal class:\r\n        // http://bonsaiden.github.com/JavaScript-Garden/#types.typeof\r\n        //\r\n        // The internal class is only guaranteed to be the same in all browsers for\r\n        // Core JavaScript classes defined in ECMAScript. It differs for classes\r\n        // part of the Browser Object Model (BOM) and Document Object Model (DOM):\r\n        // window, document, DOM nodes:\r\n        //\r\n        //   window        - 'Object' (IE), 'Window' (Firefox,Opera),\r\n        //                   'global' (Chrome), 'DOMWindow' (Safari)\r\n        //   document      - 'Object' (IE),\r\n        //                   'HTMLDocument' (Firefox,Chrome,Safari,Opera)\r\n        //   document.body - 'Object' (IE),\r\n        //                   'HTMLBodyElement' (Firefox,Chrome,Safari,Opera)\r\n        //   document.createElement('div') - 'Object' (IE)\r\n        //                   'HTMLDivElement' (Firefox,Chrome,Safari,Opera)\r\n        //   document.createComment('') - 'Object' (IE),\r\n        //                   'Comment' (Firefox,Chrome,Safari,Opera)\r\n\r\n        // do not trust global undefined, which may be overridden\r\n        var undef       = void 0,\r\n            i,          // iterative variable\r\n            length      = arguments.length,\r\n            last        = length - 1,\r\n            type,\r\n            typeOfType,\r\n            internalClass,\r\n            v           = value;\r\n\r\n        if (length === 0) {\r\n            return false; // no argument\r\n        }\r\n\r\n        if (length === 1) {\r\n            return (value !== null && value !== undef);\r\n        }\r\n\r\n        if (length > 2) {\r\n            for (i = 0; i < last - 1; i += 1) {\r\n                if (!is(v)) {\r\n                    return false;\r\n                }\r\n                v = v[arguments[i + 1]];\r\n            }\r\n        }\r\n\r\n        type = arguments[last];\r\n        if (v === null) {\r\n            return (type === null || type === 'null');\r\n        }\r\n        if (v === undef) {\r\n            return (type === undef || type === 'undefined');\r\n        }\r\n        if (type === '') {\r\n            return v === type;\r\n        }\r\n\r\n        typeOfType = typeof type;\r\n        if (typeOfType === 'string') {\r\n            internalClass =\r\n                Object.prototype\r\n                    .toString\r\n                    .call(v)\r\n                    .slice(8, -1)\r\n                    .toLowerCase();\r\n            return internalClass === type;\r\n        }\r\n\r\n        if (typeOfType === 'function') {\r\n            return v instanceof type;\r\n        }\r\n\r\n        return v === type;\r\n    }\r\n\r\n    export default {\r\n        is:      is,\r\n        typeOf:  typeOf\r\n    };\r\n\r\n\r\n"]}