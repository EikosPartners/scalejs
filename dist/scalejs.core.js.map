{"version":3,"sources":["../src/scalejs.core.js"],"names":["has","object","is","type","extend","addOne","array","error","log","self","extensions","applicationEventListeners","isApplicationRunning","registerExtension","extension","ext","buildCore","core","ex","buildSandbox","id","Error","sandbox","forEach","onApplicationEvent","listener","push","notifyApplicationStarted","notifyApplicationStopped","Object","defineProperty","value","writable"],"mappings":"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","file":"scalejs.core.js","sourcesContent":["/**\r\n * Provides core functionality of scalejs\r\n * @namespace scalejs.core\r\n * @module core\r\n */\r\n\r\n/*global define*/\r\nimport base from './scalejs.base';\r\n    \r\n\r\n    // Imports\r\n    var has         = base.object.has,\r\n        is          = base.type.is,\r\n        extend      = base.object.extend,\r\n        addOne      = base.array.addOne,\r\n        error       = base.log.error,\r\n\r\n        /**\r\n         * Holds the core\r\n         * @property self\r\n         * @type Object\r\n         * @memberOf core\r\n         * @private\r\n         */\r\n        self                        = { },\r\n        /**\r\n         * Holds extensions for the core and sandbox\r\n         * @property extensions\r\n         * @type Array\r\n         * @memberOf core\r\n         * @private\r\n         */\r\n        extensions                  = [ ],\r\n        /**\r\n         * Holds application event listeners\r\n         * @property applicationEventListeners\r\n         * @type Array\r\n         * @memberOf core\r\n         * @private\r\n         */\r\n        applicationEventListeners   = [ ],\r\n        /**\r\n         * Holds the current application state\r\n         * @property isApplicationRunning\r\n         * @type Boolean\r\n         * @memberOf core\r\n         * @private\r\n         */\r\n        isApplicationRunning        = false;\r\n\r\n    /**\r\n     * Registers an extension to the sandbox\r\n     *\r\n     * @param {Function|Object} extension function to create the extension or\r\n     *                                    object representing the extension\r\n     * @memberOf core\r\n     */\r\n    function registerExtension(extension) {\r\n        try {\r\n            var ext; // Actual extension\r\n\r\n            if (is(extension, 'buildCore', 'function')) {\r\n            // If extension has buildCore function then give it an instance of the core.\r\n                extension.buildCore(self);\r\n                addOne(extensions, extension);\r\n                return; // No need to extend as that will be handled in buildCore\r\n            }\r\n\r\n            if (is(extension, 'function')) {\r\n            // If extension is a function then give it an instance of the core.\r\n                ext = extension(self);\r\n            }\r\n            else if (has(extension, 'core')) {\r\n            // If extension has `core` property then extend core with it.\r\n                ext = extension.core;\r\n            }\r\n            else {\r\n            // Otherwise extend core with the extension itself.\r\n                ext = extension;\r\n            }\r\n\r\n            if (ext) {\r\n                extend(self, ext);\r\n                addOne(extensions, extension);\r\n            }\r\n\r\n        } catch (ex) {\r\n            error('Fatal error during application initialization. ',\r\n                    'Failed to build core with extension \"',\r\n                    extension,\r\n                    'See following exception for more details.',\r\n                    ex);\r\n        }\r\n        \r\n        return extension;\r\n    }\r\n\r\n    /**\r\n     * Builds a sandbox from the current list of extensions\r\n     *\r\n     * @param {String} id identifier for the sandbox\r\n     * @memberOf core\r\n     * @return {Object} object representing the built sandbox\r\n     */\r\n    function buildSandbox(id) {\r\n        if (!has(id)) {\r\n            throw new Error('Sandbox name is required to build a sandbox.');\r\n        }\r\n\r\n        // Create module instance specific sandbox\r\n        var sandbox = {\r\n            type:   self.type,\r\n            object: self.object,\r\n            array:  self.array,\r\n            log:    self.log\r\n        };\r\n\r\n        // Add extensions to sandbox\r\n        extensions.forEach(function (extension) {\r\n            try {\r\n\r\n                // If extension has buildSandbox method use it to build sandbox\r\n                if (is(extension, 'buildSandbox', 'function')) {\r\n                    extension.buildSandbox(sandbox);\r\n                }\r\n\r\n                // If extension has a sandbox object add it\r\n                else if (has(extension, 'sandbox')) {\r\n                    extend(sandbox, extension.sandbox);\r\n                }\r\n\r\n                // Otherwise extend the sandbox with the extension\r\n                else {\r\n                    extend(sandbox, extension);\r\n                }\r\n\r\n            } catch (ex) {\r\n                error('Fatal error during application initialization. ',\r\n                      'Failed to build sandbox with extension \"',\r\n                      extension,\r\n                      'See following exception for more details.',\r\n                      ex);\r\n                throw ex;\r\n            }\r\n        });\r\n\r\n        return sandbox;\r\n    }\r\n\r\n    /**\r\n     * Adds a listener to the application event\r\n     *\r\n     * @param {Function} listener called on application event\r\n     * @param {String}   listener.message event description\r\n     * @memberOf core\r\n     */\r\n    function onApplicationEvent(listener) {\r\n        applicationEventListeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Notify the event listeners the application has started\r\n     *\r\n     * @memberOf core\r\n     */\r\n    function notifyApplicationStarted() {\r\n        if (isApplicationRunning) { return; }\r\n\r\n        isApplicationRunning = true;\r\n        applicationEventListeners.forEach(function (listener) {\r\n            listener('started');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notify the event listeners the application has stopped\r\n     *\r\n     * @memberOf core\r\n     */\r\n    function notifyApplicationStopped() {\r\n        if (!isApplicationRunning) { return; }\r\n\r\n        isApplicationRunning = false;\r\n        applicationEventListeners.forEach(function (listener) {\r\n            listener('stopped');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Constant for notifying application start\r\n     *\r\n     * @property STARTED\r\n     * @type String\r\n     * @memberOf core\r\n     */\r\n    Object.defineProperty(self, 'STARTED', {\r\n        value: 'started',\r\n        writable: false\r\n    });\r\n\r\n    /**\r\n     * Constant for notifying application stop\r\n     *\r\n     * @property STOPPED\r\n     * @type String\r\n     * @memberOf core\r\n     */\r\n    Object.defineProperty(self, 'STOPPED', {\r\n        value: 'stopped',\r\n        writable: false\r\n    });\r\n\r\n    export default extend(self, {\r\n        type:                       base.type,\r\n        object:                     base.object,\r\n        array:                      base.array,\r\n        log:                        base.log,\r\n        buildSandbox:               buildSandbox,\r\n        notifyApplicationStarted:   notifyApplicationStarted,\r\n        notifyApplicationStopped:   notifyApplicationStopped,\r\n        onApplicationEvent:         onApplicationEvent,\r\n        registerExtension:          registerExtension,\r\n        /**\r\n         * Accesses the current state of the application\r\n         *\r\n         * @memberOf core\r\n         * @return {Boolean} state of the application\r\n         */\r\n        isApplicationRunning: function () { return isApplicationRunning; }\r\n\r\n    });\r\n\r\n\r\n"]}