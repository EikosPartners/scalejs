{"version":3,"sources":["../src/scalejs.base.object.js"],"names":[],"mappings":"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","file":"scalejs.base.object.js","sourcesContent":["/**\r\n * Provides object functionality to scalejs base\r\n * @namespace scalejs.base\r\n * @module object\r\n */\r\n\r\n/*global define*/\r\nimport type from './scalejs.base.type';\r\n    \r\n\r\n    var is = type.is;\r\n\r\n    /**\r\n     * Determines if an object exists and if it does checks that each in\r\n     * the chain of properties also exist\r\n     *\r\n     * @param {Object|Any} obj       object to test\r\n     * @param {String}     [prop...] property chain of the object to test\r\n     * @memberOf object\r\n     * @return {Boolean} if the object 'has' (see inline documentation)\r\n     */\r\n    function has(object) {\r\n        // The intent of this method is to replace unsafe tests relying on type\r\n        // coercion for optional arguments or obj properties:\r\n        // | function on(event,options){\r\n        // |   options = options || {}; // type coercion\r\n        // |   if (!event || !event.data || !event.data.value){\r\n        // |     // unsafe due to type coercion: all falsy values '', false, 0\r\n        // |     // are discarded, not just null and undefined\r\n        // |     return;\r\n        // |   }\r\n        // |   // ...\r\n        // | }\r\n        // with a safer test without type coercion:\r\n        // | function on(event,options){\r\n        // |   options = has(options)? options : {}; // no type coercion\r\n        // |   if (!has(event,'data','value'){\r\n        // |     // safe check: only null/undefined values are rejected;\r\n        // |     return;\r\n        // |   }\r\n        // |   // ...\r\n        // | }\r\n        //\r\n        // Returns:\r\n        //   * false if no argument is provided or if the obj is null or\r\n        //     undefined, whatever the number of arguments\r\n        //   * true if the full chain of nested properties is found in the obj\r\n        //     and the corresponding value is neither null nor undefined\r\n        //   * false otherwise\r\n\r\n        var i, // iterative variable\r\n            length,\r\n            o = object,\r\n            property;\r\n\r\n        if (!is(o)) {\r\n            return false;\r\n        }\r\n\r\n        for (i = 1, length = arguments.length; i < length; i += 1) {\r\n            property = arguments[i];\r\n            o = o[property];\r\n            if (!is(o)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Deep extend of the supplier into the reciever\r\n     * @private\r\n     *\r\n     * @param {Object} reciever object into which to extend\r\n     * @param {Object} supplier object from which to extend\r\n     * @memberOf object\r\n     * @return the reciever object for ease\r\n     */\r\n    function mix(receiver, supplier) {\r\n        var p;\r\n        for (p in supplier) {\r\n            if (supplier.hasOwnProperty(p)) {\r\n                if ( has(supplier, p) && has(receiver, p) &&\r\n                     supplier[p].constructor === Object\r\n                ) {\r\n                    receiver[p] = mix(receiver[p], supplier[p]);\r\n                } else {\r\n                    receiver[p] = supplier[p];\r\n                }\r\n            }\r\n        }\r\n\r\n        return receiver;\r\n    }\r\n\r\n    /**\r\n     * Merges all of the passed objects into a new object\r\n     *\r\n     * @param {Object} [obj...] object to mix into the new object\r\n     * @memberOf object\r\n     * @return {Object} the merged object\r\n     */\r\n    function merge() {\r\n        var args    = arguments,\r\n            i, // iterative variable\r\n            len     = args.length,\r\n            result  = { };\r\n\r\n        for (i = 0; i < len; i += 1) {\r\n            mix(result, args[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones the passed object\r\n     *\r\n     * @param {Object} obj object to be cloned\r\n     * @memberOf object\r\n     * @return {Object} the cloned object\r\n     */\r\n    function clone(o) {\r\n        return merge(o);\r\n    }\r\n\r\n    /**\r\n     * Extends the extension into the reciever\r\n     *\r\n     * @param {Object} reciever  object into which to extend\r\n     * @param {Object} extension object from which to extend\r\n     * @param {String} [path]    followed on the reciever before executing\r\n     *                           the extend (form: \"obj.obj.obj\")\r\n     * @memberOf object\r\n     * @return the extended object (after having followed the path)\r\n     */\r\n    function extend(receiver, extension, path) {\r\n        var props = ( has(path) ) ? path.split('.') : [ ],\r\n            target = receiver,\r\n            i; // iterative variable\r\n\r\n        for (i = 0; i < props.length; i += 1) {\r\n            if (!has(target, props[i])) {\r\n                target[props[i]] = { };\r\n            }\r\n            target = target[props[i]];\r\n        }\r\n\r\n        mix(target, extension);\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Obtains a value from an object following a path with the option to\r\n     * return a default value if that object was not found\r\n     *\r\n     * @param {Object} o    object in which to look for the specified path\r\n     * @param {String} path string representing the chain of properties to\r\n     *                      to be followed (form: \"obj.obj.obj\")\r\n     * @param {Any}    [defaultValue] value to return if the path does not\r\n     *                                evaluate successfully: default undefined\r\n     * @memberOf object\r\n     * @return {Any} object evaluated by following the given path or the default\r\n     *               value should that object not exist\r\n     */\r\n    function get(o, path, defaultValue) {\r\n        var props   = path.split('.'),\r\n            i, // iterative variable\r\n            p, // current property\r\n            success = true;\r\n\r\n        for (i = 0; i < props.length; i += 1) {\r\n            p = props[i];\r\n            if (has(o, p)) {\r\n                o = o[p];\r\n            } else {\r\n                success = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return success ? o : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Gives the value if it exists or the default value if not\r\n     *\r\n     * @param {Any} value item to check\r\n     * @param {Any} [defaultValue] item to return if value does not exist\r\n     * @memberOf object\r\n     * @return value if it exists or default if not\r\n     */\r\n    function valueOrDefault(value, defaultValue) {\r\n        return has(value) ? value : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Stringifies an object without the chance for circular error\r\n     *\r\n     * @param {Object} obj object to stringify\r\n     * @memberOf object\r\n     * @return {String} string form of the passed object\r\n     */\r\n    function stringify(obj) {\r\n        var cache = [ ];\r\n\r\n        return JSON.stringify(obj, function(key, value) {\r\n            if (typeof value === 'object' && value !== null) {\r\n                if (cache.indexOf(value) !== -1) {\r\n                    return '[Circular]';\r\n                }\r\n                cache.push(value);\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    export default {\r\n        has:            has,\r\n        valueOrDefault: valueOrDefault,\r\n        merge:          merge,\r\n        extend:         extend,\r\n        clone:          clone,\r\n        get:            get,\r\n        stringify:      stringify\r\n    };\r\n\r\n\r\n"]}