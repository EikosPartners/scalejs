{"version":3,"sources":["../src/scalejs.base.array.js"],"names":["valueOrDefault","addOne","array","item","indexOf","push","removeOne","found","splice","removeAll","length","copy","first","count","Array","prototype","slice","call","find","f","context","i","l","hasOwnProperty","toArray","list","start"],"mappings":";;;;;;AAOA;;;;;;AAGI,IAAIA,iBAAiB,sBAAOA,cAA5B;;AAEA;;;;;;;AAZJ;;;;;;AAMA;AAaI,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;AACzB,QAAID,MAAME,OAAN,CAAcD,IAAd,IAAsB,CAA1B,EAA6B;AACzBD,cAAMG,IAAN,CAAWF,IAAX;AACH;AACJ;;AAED;;;;;;;AAOA,SAASG,SAAT,CAAmBJ,KAAnB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAII,QAAQL,MAAME,OAAN,CAAcD,IAAd,CAAZ;AACA,QAAII,QAAQ,CAAC,CAAb,EAAgB;AACZL,cAAMM,MAAN,CAAaD,KAAb,EAAoB,CAApB;AACH;AACJ;;AAED;;;;;;AAMA,SAASE,SAAT,CAAmBP,KAAnB,EAA0B;AACtBA,UAAMM,MAAN,CAAa,CAAb,EAAgBN,MAAMQ,MAAtB;AACH;;AAED;;;;;;;;;AASA,SAASC,IAAT,CAAcT,KAAd,EAAqBU,KAArB,EAA4BC,KAA5B,EAAmC;AAC/BD,YAAQZ,eAAeY,KAAf,EAAsB,CAAtB,CAAR;AACAC,YAAQb,eAAea,KAAf,EAAsBX,MAAMQ,MAA5B,CAAR;AACA,WAAOI,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bf,KAA3B,EAAkCU,KAAlC,EAAyCC,KAAzC,CAAP;AACH;;AAED;;;;;;;;;AASA,SAASK,IAAT,CAAchB,KAAd,EAAqBiB,CAArB,EAAwBC,OAAxB,EAAiC;AAC7B,QAAIC,CAAJ,EAAO;AACHC,KADJ,CAD6B,CAEtB;;AAEP,SAAKD,IAAI,CAAJ,EAAOC,IAAIpB,MAAMQ,MAAtB,EAA8BW,IAAIC,CAAlC,EAAqCD,KAAK,CAA1C,EAA6C;AACzC,YAAInB,MAAMqB,cAAN,CAAqBF,CAArB,KAA2BF,EAAEF,IAAF,CAAOG,OAAP,EAAgBlB,MAAMmB,CAAN,CAAhB,EAA0BA,CAA1B,EAA6BnB,KAA7B,CAA/B,EAAoE;AAChE,mBAAOA,MAAMmB,CAAN,CAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AAED;;;;;;;;;AASA,SAASG,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8Bb,KAA9B,EAAqC;AACjC,WAAOF,KAAKc,IAAL,EAAWC,KAAX,EAAkBb,KAAlB,CAAP;AACH;;kBAEc;AACXZ,YAAYA,MADD;AAEXK,eAAYA,SAFD;AAGXG,eAAYA,SAHD;AAIXE,UAAYA,IAJD;AAKXO,UAAYA,IALD;AAMXM,aAAYA;AAND,C","file":"scalejs.base.array.js","sourcesContent":["/**\r\n * Provides array functionality to scalejs base\r\n * @namespace scalejs.base\r\n * @module array\r\n */\r\n\r\n/*global define*/\r\nimport object from './scalejs.base.object';\r\n    \r\n\r\n    var valueOrDefault = object.valueOrDefault;\r\n\r\n    /**\r\n     * Adds an item to the passed array if it doesn't already exist\r\n     *\r\n     * @param {Array} array list to add the item to\r\n     * @param {Any}   item  thing to add to the list\r\n     * @memberOf array\r\n     */\r\n    function addOne(array, item) {\r\n        if (array.indexOf(item) < 0) {\r\n            array.push(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the first occurrance of the passed item from the passed array\r\n     *\r\n     * @param {Array} array list remove the item from\r\n     * @param {Any}   item  item to be removed from the list\r\n     * @memberOf array\r\n     */\r\n    function removeOne(array, item) {\r\n        var found = array.indexOf(item);\r\n        if (found > -1) {\r\n            array.splice(found, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all items from an array\r\n     *\r\n     * @param {Array} array list to remove items from\r\n     * @memberOf array\r\n     */\r\n    function removeAll(array) {\r\n        array.splice(0, array.length);\r\n    }\r\n\r\n    /**\r\n     * Copy the items from the array into a new one\r\n     *\r\n     * @param {Array}  array   list to copy from\r\n     * @param {Number} [first] starting index to copy from (defult:0)\r\n     * @param {Number} [count] number of items to copy (default:array.length)\r\n     * @memberOf array\r\n     * @return {Array} copied list\r\n     */\r\n    function copy(array, first, count) {\r\n        first = valueOrDefault(first, 0);\r\n        count = valueOrDefault(count, array.length);\r\n        return Array.prototype.slice.call(array, first, count);\r\n    }\r\n\r\n    /**\r\n     * Finds the passed item in the array\r\n     *\r\n     * @param {Array}    array   list in which to search\r\n     * @param {Function} f       function to seach with\r\n     * @param {Any}      content context on which to call the function\r\n     * @memberOf array\r\n     * @return {Any|Object} item if found, null if not\r\n     */\r\n    function find(array, f, context) {\r\n        var i, // iterative variable\r\n            l; // array length variable\r\n\r\n        for (i = 0, l = array.length; i < l; i += 1) {\r\n            if (array.hasOwnProperty(i) && f.call(context, array[i], i, array)) {\r\n                return array[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Converts object structured like array into an array\r\n     *\r\n     * @param {Any}    list    object structred with numerical keys\r\n     * @param {Number} [first] starting index to copy from (defult:0)\r\n     * @param {Number} [count] number of items to copy (default:array.length)\r\n     * @memberOf array\r\n     * @return {Array} result of the array conversion\r\n     */\r\n    function toArray(list, start, count) {\r\n        return copy(list, start, count);\r\n    }\r\n\r\n    export default {\r\n        addOne:     addOne,\r\n        removeOne:  removeOne,\r\n        removeAll:  removeAll,\r\n        copy:       copy,\r\n        find:       find,\r\n        toArray:    toArray\r\n    };\r\n\r\n\r\n"]}