{"version":3,"sources":["../src/scalejs.base.array.js"],"names":[],"mappings":";;;;;;AAOA;;;;;;AAGI,IAAI,iBAAiB,sBAAO,cAA5B;;;;;;;;;;;;;;;;AASA,SAAS,MAAT,CAAgB,KAAhB,EAAuB,IAAvB,EAA6B;AACzB,QAAI,MAAM,OAAN,CAAc,IAAd,IAAsB,CAA1B,EAA6B;AACzB,cAAM,IAAN,CAAW,IAAX;AACH;AACJ;;;;;;;;;AASD,SAAS,SAAT,CAAmB,KAAnB,EAA0B,IAA1B,EAAgC;AAC5B,QAAI,QAAQ,MAAM,OAAN,CAAc,IAAd,CAAZ;AACA,QAAI,QAAQ,CAAC,CAAb,EAAgB;AACZ,cAAM,MAAN,CAAa,KAAb,EAAoB,CAApB;AACH;AACJ;;;;;;;;AAQD,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,UAAM,MAAN,CAAa,CAAb,EAAgB,MAAM,MAAtB;AACH;;;;;;;;;;;AAWD,SAAS,IAAT,CAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,EAAmC;AAC/B,YAAQ,eAAe,KAAf,EAAsB,CAAtB,CAAR;AACA,YAAQ,eAAe,KAAf,EAAsB,MAAM,MAA5B,CAAR;AACA,WAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,KAAzC,CAAP;AACH;;;;;;;;;;;AAWD,SAAS,IAAT,CAAc,KAAd,EAAqB,CAArB,EAAwB,OAAxB,EAAiC;AAC7B,QAAI,CAAJ,E;AACI,KADJ,C;;AAGA,SAAK,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAtB,EAA8B,IAAI,CAAlC,EAAqC,KAAK,CAA1C,EAA6C;AACzC,YAAI,MAAM,cAAN,CAAqB,CAArB,KAA2B,EAAE,IAAF,CAAO,OAAP,EAAgB,MAAM,CAAN,CAAhB,EAA0B,CAA1B,EAA6B,KAA7B,CAA/B,EAAoE;AAChE,mBAAO,MAAM,CAAN,CAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;;;;;;;;;;AAWD,SAAS,OAAT,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AACjC,WAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,KAAlB,CAAP;AACH;;kBAEc;AACX,YAAY,MADD;AAEX,eAAY,SAFD;AAGX,eAAY,SAHD;AAIX,UAAY,IAJD;AAKX,UAAY,IALD;AAMX,aAAY;AAND,C","file":"scalejs.base.array.js","sourcesContent":["/**\r\n * Provides array functionality to scalejs base\r\n * @namespace scalejs.base\r\n * @module array\r\n */\r\n\r\n/*global define*/\r\nimport object from './scalejs.base.object';\r\n    \r\n\r\n    var valueOrDefault = object.valueOrDefault;\r\n\r\n    /**\r\n     * Adds an item to the passed array if it doesn't already exist\r\n     *\r\n     * @param {Array} array list to add the item to\r\n     * @param {Any}   item  thing to add to the list\r\n     * @memberOf array\r\n     */\r\n    function addOne(array, item) {\r\n        if (array.indexOf(item) < 0) {\r\n            array.push(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the first occurrance of the passed item from the passed array\r\n     *\r\n     * @param {Array} array list remove the item from\r\n     * @param {Any}   item  item to be removed from the list\r\n     * @memberOf array\r\n     */\r\n    function removeOne(array, item) {\r\n        var found = array.indexOf(item);\r\n        if (found > -1) {\r\n            array.splice(found, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all items from an array\r\n     *\r\n     * @param {Array} array list to remove items from\r\n     * @memberOf array\r\n     */\r\n    function removeAll(array) {\r\n        array.splice(0, array.length);\r\n    }\r\n\r\n    /**\r\n     * Copy the items from the array into a new one\r\n     *\r\n     * @param {Array}  array   list to copy from\r\n     * @param {Number} [first] starting index to copy from (defult:0)\r\n     * @param {Number} [count] number of items to copy (default:array.length)\r\n     * @memberOf array\r\n     * @return {Array} copied list\r\n     */\r\n    function copy(array, first, count) {\r\n        first = valueOrDefault(first, 0);\r\n        count = valueOrDefault(count, array.length);\r\n        return Array.prototype.slice.call(array, first, count);\r\n    }\r\n\r\n    /**\r\n     * Finds the passed item in the array\r\n     *\r\n     * @param {Array}    array   list in which to search\r\n     * @param {Function} f       function to seach with\r\n     * @param {Any}      content context on which to call the function\r\n     * @memberOf array\r\n     * @return {Any|Object} item if found, null if not\r\n     */\r\n    function find(array, f, context) {\r\n        var i, // iterative variable\r\n            l; // array length variable\r\n\r\n        for (i = 0, l = array.length; i < l; i += 1) {\r\n            if (array.hasOwnProperty(i) && f.call(context, array[i], i, array)) {\r\n                return array[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Converts object structured like array into an array\r\n     *\r\n     * @param {Any}    list    object structred with numerical keys\r\n     * @param {Number} [first] starting index to copy from (defult:0)\r\n     * @param {Number} [count] number of items to copy (default:array.length)\r\n     * @memberOf array\r\n     * @return {Array} result of the array conversion\r\n     */\r\n    function toArray(list, start, count) {\r\n        return copy(list, start, count);\r\n    }\r\n\r\n    export default {\r\n        addOne:     addOne,\r\n        removeOne:  removeOne,\r\n        removeAll:  removeAll,\r\n        copy:       copy,\r\n        find:       find,\r\n        toArray:    toArray\r\n    };\r\n\r\n\r\n"]}