{"version":3,"sources":["../src/scalejs.application.js"],"names":["addOne","array","toArray","error","log","debug","moduleRegistrations","moduleInstances","registerModules","isApplicationRunning","Error","Array","prototype","push","apply","arguments","filter","m","createModule","module","moduleInstance","moduleId","ex","getId","name","stack","createAll","forEach","startAll","notifyApplicationStarted","stopAll","notifyApplicationStopped","run","exit"],"mappings":";;;;;;AAOA;;;;;;AAGI,IAAIA,SAAU,kBAAKC,KAAL,CAAWD,MAAzB;AAAA,IACIE,UAAU,kBAAKD,KAAL,CAAWC,OADzB;AAAA,IAEIC,QAAU,kBAAKC,GAAL,CAASD,KAFvB;AAAA,IAGIE,QAAU,kBAAKD,GAAL,CAASC,KAHvB;;;AAKI;;;;;;;AAOAC,sBAAsB,EAZ1B;;AAaI;;;;;;;AAOAC,kBAAsB,EApB1B;;AAsBA;;;;;;AAhCJ;;;;;;AAMA;AAgCI,SAASC,eAAT,GAA2B;AACvB;AACA;AACA;AACA,QAAI,kBAAKC,oBAAL,EAAJ,EAAiC;AAC7B,cAAM,IAAIC,KAAJ,CAAU,kEAAV,EACU,0CADV,CAAN;AAEH;;AAEDC,UAAMC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BR,mBAA3B,EAAgDJ,QAAQa,SAAR,EAAmBC,MAAnB,CAA0B,UAAUC,CAAV,EAAa;AAAE,eAAOA,CAAP;AAAW,KAApD,CAAhD;AACH;;AAED;;;;;;;;AAQA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAIC,cAAJ,EACIC,QADJ;;AAGA,QAAI,OAAOF,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAI;AACAC,6BAAiBD,QAAjB;AACH,SAFD,CAEE,OAAOG,EAAP,EAAW;AACT,gBAAIH,OAAOI,KAAX,EAAkB;AACdF,2BAAWF,OAAOI,KAAP,EAAX;AACH,aAFD,MAEO;AACHF,2BAAWF,OAAOK,IAAlB;AACH;;AAEDrB,kBAAM,6CAA6CkB,QAA7C,GAAwD,IAA9D,EACM,2DACA,iDAFN,EAGMC,GAAGG,KAHT;AAIH;AACJ,KAfD,MAeO;AACHL,yBAAiBD,MAAjB;AACH;;AAEDnB,WAAOO,eAAP,EAAwBa,cAAxB;;AAEA,WAAOA,cAAP;AACH;;AAED;;;;;;AAMA,SAASM,SAAT,GAAqB;AACjBpB,wBAAoBqB,OAApB,CAA4BT,YAA5B;AACH;;AAED;;;;;;AAMA,SAASU,QAAT,GAAoB;AAChBvB,UAAM,sBAAN;;AAEA,sBAAKwB,wBAAL;AACH;;AAED;;;;;;AAMA,SAASC,OAAT,GAAmB;AACfzB,UAAM,qBAAN;;AAEA,sBAAK0B,wBAAL;AACH;;AAED;;;;;;AAMA,SAASC,GAAT,GAAe;AACXN;AACAE;AACH;;AAED;;;;;AAKA,SAASK,IAAT,GAAgB;AACZH;AACH;;kBAEc;AACXtB,qBAAgBA,eADL;AAEXwB,SAAgBA,GAFL;AAGXC,UAAgBA;AAHL,C","file":"scalejs.application.js","sourcesContent":["/**\r\n * Application manages the life cycle of modules.\r\n * @namespace scalejs.application\r\n * @module application\r\n */\r\n\r\n/*global define*/\r\nimport core from 'scalejs.core';\r\n    \r\n\r\n    var addOne  = core.array.addOne,\r\n        toArray = core.array.toArray,\r\n        error   = core.log.error,\r\n        debug   = core.log.debug,\r\n\r\n        /**\r\n         * Holds modules that have been registered to the application\r\n         * @property moduleRegistrations\r\n         * @type Array\r\n         * @memberOf applciation\r\n         * @private\r\n         */\r\n        moduleRegistrations = [ ],\r\n        /**\r\n         * Holds instances of running modules\r\n         * @property moduleInstances\r\n         * @type Array\r\n         * @memberOf applciation\r\n         * @private\r\n         */\r\n        moduleInstances     = [ ];\r\n\r\n    /**\r\n     * Registers a series of modules to the application\r\n     *\r\n     * @param {Function|Object} [module...] modules to register\r\n     * @memberOf application\r\n     */\r\n    function registerModules() {\r\n        // Dynamic module loading is no longer supported for simplicity.\r\n        // Module is free to load any of its resources dynamically.\r\n        // Or an extension can provide dynamic module loading capabilities as needed.\r\n        if (core.isApplicationRunning()) {\r\n            throw new Error('Can\\'t register module since the application is already running.',\r\n                            'Dynamic module loading is not supported.');\r\n        }\r\n\r\n        Array.prototype.push.apply(moduleRegistrations, toArray(arguments).filter(function (m) { return m; }));\r\n    }\r\n\r\n    /**\r\n     * Creates a module instance from the passed framework\r\n     * @private\r\n     *\r\n     * @param {Function|Object} module what to obtain an instance of\r\n     * @memberOf application\r\n     * @return the module instance\r\n     */\r\n    function createModule(module) {\r\n        var moduleInstance,\r\n            moduleId;\r\n\r\n        if (typeof module === 'function') {\r\n            try {\r\n                moduleInstance = module();\r\n            } catch (ex) {\r\n                if (module.getId) {\r\n                    moduleId = module.getId();\r\n                } else {\r\n                    moduleId = module.name;\r\n                }\r\n\r\n                error('Failed to create an instance of module \"' + moduleId + '\".',\r\n                      'Application will continue running without the module. ' +\r\n                      'See following exception stack for more details.',\r\n                      ex.stack);\r\n            }\r\n        } else {\r\n            moduleInstance = module;\r\n        }\r\n\r\n        addOne(moduleInstances, moduleInstance);\r\n\r\n        return moduleInstance;\r\n    }\r\n\r\n    /**\r\n     * Creates all modules currently registered to this applciation\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function createAll() {\r\n        moduleRegistrations.forEach(createModule);\r\n    }\r\n\r\n    /**\r\n     * Starts all of the attached module instances\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function startAll() {\r\n        debug('Application started.');\r\n\r\n        core.notifyApplicationStarted();\r\n    }\r\n\r\n    /**\r\n     * Stops all of the attached module instances\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function stopAll() {\r\n        debug('Application exited.');\r\n\r\n        core.notifyApplicationStopped();\r\n    }\r\n\r\n    /**\r\n     * Launches the application by creating all module instances\r\n     * and launching them all\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function run() {\r\n        createAll();\r\n        startAll();\r\n    }\r\n\r\n    /**\r\n     * Exits the application by stopping all running modules\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function exit() {\r\n        stopAll();\r\n    }\r\n\r\n    export default {\r\n        registerModules:registerModules,\r\n        run:            run,\r\n        exit:           exit\r\n    };\r\n\r\n\r\n"]}