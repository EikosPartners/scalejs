{"version":3,"sources":["../src/scalejs.application.js"],"names":[],"mappings":";;;;;;AAOA;;;;;;AAGI,IAAI,SAAU,kBAAK,KAAL,CAAW,MAAzB;AAAA,IACI,UAAU,kBAAK,KAAL,CAAW,OADzB;AAAA,IAEI,QAAU,kBAAK,GAAL,CAAS,KAFvB;AAAA,IAGI,QAAU,kBAAK,GAAL,CAAS,KAHvB;AAAA;;;;;;;;;AAYI,sBAAsB,EAZ1B;AAAA;;;;;;;;AAoBI,kBAAsB,EApB1B;;;;;;;;;;;;;;;AA4BA,SAAS,eAAT,GAA2B;;;;AAIvB,QAAI,kBAAK,oBAAL,EAAJ,EAAiC;AAC7B,cAAM,IAAI,KAAJ,CAAU,kEAAV,EACU,0CADV,CAAN;AAEH;;AAED,UAAM,SAAN,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,mBAA3B,EAAgD,QAAQ,SAAR,EAAmB,MAAnB,CAA0B,UAAU,CAAV,EAAa;AAAE,eAAO,CAAP;AAAW,KAApD,CAAhD;AACH;;;;;;;;;;AAUD,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC1B,QAAI,cAAJ,EACI,QADJ;;AAGA,QAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAI;AACA,6BAAiB,QAAjB;AACH,SAFD,CAEE,OAAO,EAAP,EAAW;AACT,gBAAI,OAAO,KAAX,EAAkB;AACd,2BAAW,OAAO,KAAP,EAAX;AACH,aAFD,MAEO;AACH,2BAAW,OAAO,IAAlB;AACH;;AAED,kBAAM,6CAA6C,QAA7C,GAAwD,IAA9D,EACM,2DACA,iDAFN,EAGM,GAAG,KAHT;AAIH;AACJ,KAfD,MAeO;AACH,yBAAiB,MAAjB;AACH;;AAED,WAAO,eAAP,EAAwB,cAAxB;;AAEA,WAAO,cAAP;AACH;;;;;;;;AAQD,SAAS,SAAT,GAAqB;AACjB,wBAAoB,OAApB,CAA4B,YAA5B;AACH;;;;;;;;AAQD,SAAS,QAAT,GAAoB;AAChB,UAAM,sBAAN;;AAEA,sBAAK,wBAAL;AACH;;;;;;;;AAQD,SAAS,OAAT,GAAmB;AACf,UAAM,qBAAN;;AAEA,sBAAK,wBAAL;AACH;;;;;;;;AAQD,SAAS,GAAT,GAAe;AACX;AACA;AACH;;;;;;;AAOD,SAAS,IAAT,GAAgB;AACZ;AACH;;kBAEc;AACX,qBAAgB,eADL;AAEX,SAAgB,GAFL;AAGX,UAAgB;AAHL,C","file":"scalejs.application.js","sourcesContent":["/**\r\n * Application manages the life cycle of modules.\r\n * @namespace scalejs.application\r\n * @module application\r\n */\r\n\r\n/*global define*/\r\nimport core from 'scalejs.core';\r\n    \r\n\r\n    var addOne  = core.array.addOne,\r\n        toArray = core.array.toArray,\r\n        error   = core.log.error,\r\n        debug   = core.log.debug,\r\n\r\n        /**\r\n         * Holds modules that have been registered to the application\r\n         * @property moduleRegistrations\r\n         * @type Array\r\n         * @memberOf applciation\r\n         * @private\r\n         */\r\n        moduleRegistrations = [ ],\r\n        /**\r\n         * Holds instances of running modules\r\n         * @property moduleInstances\r\n         * @type Array\r\n         * @memberOf applciation\r\n         * @private\r\n         */\r\n        moduleInstances     = [ ];\r\n\r\n    /**\r\n     * Registers a series of modules to the application\r\n     *\r\n     * @param {Function|Object} [module...] modules to register\r\n     * @memberOf application\r\n     */\r\n    function registerModules() {\r\n        // Dynamic module loading is no longer supported for simplicity.\r\n        // Module is free to load any of its resources dynamically.\r\n        // Or an extension can provide dynamic module loading capabilities as needed.\r\n        if (core.isApplicationRunning()) {\r\n            throw new Error('Can\\'t register module since the application is already running.',\r\n                            'Dynamic module loading is not supported.');\r\n        }\r\n\r\n        Array.prototype.push.apply(moduleRegistrations, toArray(arguments).filter(function (m) { return m; }));\r\n    }\r\n\r\n    /**\r\n     * Creates a module instance from the passed framework\r\n     * @private\r\n     *\r\n     * @param {Function|Object} module what to obtain an instance of\r\n     * @memberOf application\r\n     * @return the module instance\r\n     */\r\n    function createModule(module) {\r\n        var moduleInstance,\r\n            moduleId;\r\n\r\n        if (typeof module === 'function') {\r\n            try {\r\n                moduleInstance = module();\r\n            } catch (ex) {\r\n                if (module.getId) {\r\n                    moduleId = module.getId();\r\n                } else {\r\n                    moduleId = module.name;\r\n                }\r\n\r\n                error('Failed to create an instance of module \"' + moduleId + '\".',\r\n                      'Application will continue running without the module. ' +\r\n                      'See following exception stack for more details.',\r\n                      ex.stack);\r\n            }\r\n        } else {\r\n            moduleInstance = module;\r\n        }\r\n\r\n        addOne(moduleInstances, moduleInstance);\r\n\r\n        return moduleInstance;\r\n    }\r\n\r\n    /**\r\n     * Creates all modules currently registered to this applciation\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function createAll() {\r\n        moduleRegistrations.forEach(createModule);\r\n    }\r\n\r\n    /**\r\n     * Starts all of the attached module instances\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function startAll() {\r\n        debug('Application started.');\r\n\r\n        core.notifyApplicationStarted();\r\n    }\r\n\r\n    /**\r\n     * Stops all of the attached module instances\r\n     * @private\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function stopAll() {\r\n        debug('Application exited.');\r\n\r\n        core.notifyApplicationStopped();\r\n    }\r\n\r\n    /**\r\n     * Launches the application by creating all module instances\r\n     * and launching them all\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function run() {\r\n        createAll();\r\n        startAll();\r\n    }\r\n\r\n    /**\r\n     * Exits the application by stopping all running modules\r\n     *\r\n     * @memberOf application\r\n     */\r\n    function exit() {\r\n        stopAll();\r\n    }\r\n\r\n    export default {\r\n        registerModules:registerModules,\r\n        run:            run,\r\n        exit:           exit\r\n    };\r\n\r\n\r\n"]}